# Generated by Django 4.1.3 on 2023-05-19 03:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BuilderObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('builder_type', models.CharField(choices=[('H', 'дом')], max_length=50, verbose_name='Объект')),
                ('montage_place', models.CharField(choices=[('B', 'бойлерная')], max_length=50, verbose_name='место установки')),
                ('main_water_source', models.CharField(choices=[('W', 'скважина')], max_length=50, verbose_name='источник воды')),
                ('sewerage_type', models.CharField(max_length=50, verbose_name='тип каназизации')),
                ('water_consumption', models.FloatField(choices=[(1.2, 'до 1,2 3 точки (пример: 2 крана и душ)'), (1.8, 'до 1,8 4-5 точек (пример: 2 крана, стиральная машина/посудомоечная машина, душ) (пиктограммами)'), (2.4, 'до 2,4 4-5 точек большего объема (пример: 2 крана, стиральная машина и посудомоечная машина, тропический душ)'), (3, 'до 3 от 5 точки большего объема (пример: бассейн, или 2 крана, стиральная машина и посудомоечная машина, тропический душ)')], verbose_name='потребление воды (л/ч)')),
                ('people_number', models.IntegerField(choices=[(3, 'до 3'), (4, 'до 4'), (5, 'до 5'), (6, 'до 6'), (7, 'до 7')], verbose_name='еоличество человек')),
                ('human_daily_norm', models.FloatField(default=0.15, verbose_name='норма потребления воды на человека в сутки')),
            ],
            options={
                'verbose_name': 'об объекте',
                'verbose_name_plural': 'об объектах',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=10, null=True)),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Columns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='название колонны')),
            ],
            options={
                'verbose_name': 'водяная колонна',
                'verbose_name_plural': 'водяные колонны',
            },
        ),
        migrations.CreateModel(
            name='Complects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complect_code', models.CharField(max_length=250, verbose_name='код комплекта')),
                ('name', models.CharField(max_length=50, verbose_name='название комплекта')),
                ('photo', models.ImageField(null=True, upload_to='', verbose_name='фото комплекта')),
                ('discrpiption', models.TextField(verbose_name='описание комплекта')),
                ('max_system_performans', models.FloatField(verbose_name='максимальная производительность системы (м3 / ч)')),
                ('min_pressure', models.FloatField(verbose_name='Давление воды на входе системы водоподготовки минимальное, при максимальном расходе м3/час, атм.')),
                ('max_pressure', models.FloatField(verbose_name='Давление воды на входе системы водоподготовки максимальное, атм.')),
                ('pressure_loss', models.FloatField(verbose_name='Потери давления в системе, атм.')),
                ('body_life_time', models.IntegerField(verbose_name='Срок эксплуатации корпусов фильтров, лет')),
                ('regenerations_loss_v', models.FloatField(verbose_name='Объем воды, сбрасываемой многофункциональным фильтром во время регенерации, м3')),
                ('regeneration_period', models.CharField(max_length=50, verbose_name='Периодичность регенерации')),
                ('min_size', models.CharField(max_length=50, verbose_name='Минимальные размеры для установки, м')),
                ('min_hight', models.FloatField(verbose_name='Минимальная высота потолка, м')),
                ('sockets_number', models.IntegerField(verbose_name='Наличие электрических розеток, со стабилизированным U ~ 220В 10%, шт., не менее\t1')),
                ('electric_power', models.IntegerField(verbose_name='Общая электрическая мощность системы водоподготовки, Вт\t25')),
                ('doorways_size', models.CharField(max_length=50, verbose_name='Дверные проемы, мм')),
                ('requered_flat_floor_cover', models.BooleanField(verbose_name='Наличие ровного полового покрытия в месте установки водоподготовки')),
                ('required_ventilation', models.BooleanField(verbose_name='Наличие в помещении приточной и вытяжной вентиляции')),
                ('required_severage', models.BooleanField(verbose_name='Наличие канализационной сети в месте установки водоподготовки\tобязательно')),
                ('severage_d', models.CharField(max_length=50, verbose_name='Диаметр канализационной сети в месте врезки регенерационной линии с фильтров')),
                ('condensation_protection', models.BooleanField(verbose_name='защита от канденсата')),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.columns', verbose_name='колонна')),
            ],
            options={
                'verbose_name': 'комплект оборудования',
                'verbose_name_plural': 'комплекы оборудования',
            },
        ),
        migrations.CreateModel(
            name='ComplectsEquipments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complects_equipments', to='calc_app.complects')),
            ],
            options={
                'verbose_name': 'принадлежность оборудования к комплекту',
                'verbose_name_plural': 'принадлежность оборудования к комплектам',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('builder_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.builderobject', verbose_name='объект, для которого подобрали фильры')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.client', verbose_name='клиент')),
                ('complect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.complects', verbose_name='комплект')),
            ],
            options={
                'verbose_name': 'Договор',
                'verbose_name_plural': 'договоры',
            },
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='название типа')),
            ],
            options={
                'verbose_name': 'тип оборудования',
                'verbose_name_plural': 'типы оборудования',
            },
        ),
        migrations.CreateModel(
            name='FullWaterParametrs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hardness', models.FloatField(choices=[(0, 'до 1'), (1, 'до 2'), (2, 'до 3'), (3, 'до 4'), (4, 'до 5'), (5, 'до 6'), (6, 'до 7'), (7, 'до 8'), (8, 'до 9'), (9, 'до 10'), (10, 'до 11'), (11, 'до 12'), (12, 'до 13'), (13, 'до 14'), (14, 'до 15'), (15, 'до 16')], verbose_name='жесткость')),
                ('ferum', models.FloatField(choices=[(0, 'до 1'), (1, 'до 2'), (2, 'до 3'), (3, 'до 4'), (4, 'до 5'), (5, 'до 6'), (6, 'до 7'), (7, 'до 8'), (8, 'до 9'), (9, 'до 10'), (10, 'до 11'), (11, 'до 12'), (12, 'до 13'), (13, 'до 14'), (14, 'до 15'), (15, 'до 16'), (16, 'до 17'), (17, 'до 18'), (18, 'до 19'), (19, 'до 20'), (20, 'до 21')], verbose_name='железо')),
                ('po', models.FloatField(choices=[(0, 'до 1'), (1, 'до 2'), (2, 'до 3'), (3, 'до 4'), (4, 'до 5'), (5, 'до 6'), (6, 'до 7'), (7, 'до 8'), (8, 'до 9'), (9, 'до 10'), (10, 'до 11'), (11, 'до 12'), (12, 'до 13'), (13, 'до 14'), (14, 'до 15'), (15, 'до 16')], verbose_name='ПО')),
                ('hydrogen_sulfite', models.FloatField(choices=[(0, 'до 1'), (1, 'до 2'), (2, 'до 3'), (3, 'до 4'), (4, 'до 5'), (5, 'до 6')], verbose_name='сервоводород')),
                ('ammonium', models.FloatField(choices=[(0, 'до 1'), (1, 'до 2'), (2, 'до 3'), (3, 'до 4'), (4, 'до 5'), (5, 'до 6')], verbose_name='аммоний')),
                ('manganese', models.FloatField(choices=[(0, 'до 1'), (1, 'до 2'), (2, 'до 3'), (3, 'до 4'), (4, 'до 5'), (5, 'до 6')], verbose_name='марганец')),
                ('exceeding_consequence', models.TextField(blank=True, verbose_name='последстваия превышения')),
                ('recommendations', models.TextField(blank=True, verbose_name='рекоммендации')),
            ],
            options={
                'verbose_name': 'анализ воды',
                'verbose_name_plural': 'анализы воды',
            },
        ),
        migrations.CreateModel(
            name='MontageWork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='название')),
                ('price', models.FloatField(verbose_name='цена')),
            ],
        ),
        migrations.CreateModel(
            name='WaterConsumptionLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_consumption', models.FloatField(choices=[(1.2, 'до 1,2 3 точки (пример: 2 крана и душ)'), (1.8, 'до 1,8 4-5 точек (пример: 2 крана, стиральная машина/посудомоечная машина, душ) (пиктограммами)'), (2.4, 'до 2,4 4-5 точек большего объема (пример: 2 крана, стиральная машина и посудомоечная машина, тропический душ)'), (3, 'до 3 от 5 точки большего объема (пример: бассейн, или 2 крана, стиральная машина и посудомоечная машина, тропический душ)')], verbose_name='потребление воды (л/ч)')),
                ('people_number', models.IntegerField(choices=[(3, 'до 3'), (4, 'до 4'), (5, 'до 5'), (6, 'до 6'), (7, 'до 7')], verbose_name='еоличество человек')),
                ('human_daily_norm', models.FloatField(default=0.15, verbose_name='норма потребления воды на человека в сутки')),
            ],
            options={
                'verbose_name': 'Уровень потреьоения воды',
                'verbose_name_plural': 'уровни потребления воды',
            },
        ),
        migrations.CreateModel(
            name='Fillers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='название наполнителя')),
                ('price', models.FloatField(default=500, verbose_name='цена наполнителя')),
                ('full_water_parametrs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.fullwaterparametrs', verbose_name='полный анализ воды')),
                ('water_consumption_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.waterconsumptionlevel', verbose_name='уровень потребления воды')),
            ],
            options={
                'verbose_name': 'наполнитель',
                'verbose_name_plural': 'наполнители',
            },
        ),
        migrations.CreateModel(
            name='Equipments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='название оборудования')),
                ('price', models.FloatField(verbose_name='цена оборудования')),
                ('complects', models.ManyToManyField(through='calc_app.ComplectsEquipments', to='calc_app.complects')),
                ('equipment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.equipmenttype')),
            ],
            options={
                'verbose_name': 'оборудование',
                'verbose_name_plural': 'оборудование',
            },
        ),
        migrations.CreateModel(
            name='ContractMontageWork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('montage_price_for_this_contract', models.FloatField()),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.contract', verbose_name='договор')),
                ('montage_work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.montagework', verbose_name='работа')),
            ],
        ),
        migrations.CreateModel(
            name='ContractFillers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.contract', verbose_name='договор')),
                ('filler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.fillers', verbose_name='наполнитель')),
            ],
        ),
        migrations.CreateModel(
            name='ContractEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(choices=[(1, 'до 2'), (2, 'до 3'), (3, 'до 4')])),
                ('equipment_price_for_this_contract', models.FloatField()),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.contract', verbose_name='контракт')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.equipments', verbose_name='оборудование')),
            ],
            options={
                'verbose_name': 'прайс-лсит на этот договор',
                'verbose_name_plural': 'прайс-листы к договорам',
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='equipments',
            field=models.ManyToManyField(through='calc_app.ContractEquipment', to='calc_app.equipments'),
        ),
        migrations.AddField(
            model_name='contract',
            name='fillers',
            field=models.ManyToManyField(through='calc_app.ContractFillers', to='calc_app.fillers', verbose_name='наполнители'),
        ),
        migrations.AddField(
            model_name='contract',
            name='montage_works',
            field=models.ManyToManyField(through='calc_app.ContractMontageWork', to='calc_app.montagework'),
        ),
        migrations.AddField(
            model_name='complectsequipments',
            name='equipment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipments_complects', to='calc_app.equipments'),
        ),
        migrations.AddField(
            model_name='complects',
            name='full_water_parametrs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.fullwaterparametrs', verbose_name='анализ воды'),
        ),
        migrations.AddField(
            model_name='complects',
            name='water_consumption_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calc_app.waterconsumptionlevel', verbose_name='уровень потребления воды'),
        ),
    ]
